apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.0"

    defaultConfig {
        applicationId "org.videolan.vlcbenchmark"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "0.1"
        buildConfigField("String", "VLC_VERSION", "\"2.1.14\"")

        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "build_api_address", "https://bench.videolabs.io/api/"
            resValue "string", "file_location_url", "https://streams.videolan.org/benchmark/"
            resValue "string", "config_file_location_url", "https://streams.videolan.org/benchmark/config.json"
        }
        debug {
            resValue "string", "build_api_address", apiAddress()
            resValue "string", "file_location_url", "https://raw.githubusercontent.com/Skantes/FileDump/master/"
            resValue "string", "config_file_location_url", "https://raw.githubusercontent.com/Skantes/FileDump/master/config.json"
        }
        debug_prod.initWith(buildTypes.debug)
        debug_prod {
            resValue "string", "build_api_address", "https://bench.videolabs.io/api/"
            resValue "string", "file_location_url", "https://streams.videolan.org/benchmark/"
            resValue "string", "config_file_location_url", "https://streams.videolan.org/benchmark/config.json"
            debuggable true
        }
    }

    applicationVariants.all { variant ->
        //Custom APK name
        variant.outputs.each { output ->
            def outputName = "VLCBenchmark-" + variant.versionName + ".apk"
            output.outputFile = new File(output.outputFile.parentFile, outputName);
        }
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.android.support:preference-v7:25.3.1'
    compile 'com.android.support:preference-v14:25.3.1'
    compile 'com.google.android.gms:play-services-auth:11.0.2'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
}

// Tmp solution to find the ip address of the computer building VLCBenchmark
// ideally should use shell script + environment variables
static def apiAddress() {
    InetAddress result = null;
    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
    while (interfaces.hasMoreElements()) {
        NetworkInterface anInterface = interfaces.nextElement();
        if (anInterface.displayName.contains("docker") ||
            anInterface.displayName.contains("virbr")) {
            continue;
        }
        Enumeration<InetAddress> addresses = anInterface.getInetAddresses();
        while (addresses.hasMoreElements()) {
            InetAddress address = addresses.nextElement();
            if (!address.isLoopbackAddress()) {
                if (address.isSiteLocalAddress()) {
                    return address.getHostAddress();
                } else if (result == null) {
                    result = address;
                }
            }
        }
    }
    return (result != null ? result : InetAddress.getLocalHost()).getHostAddress();

}

static def hostName() {
    return System.getProperty("user.name") + "@" + InetAddress.localHost.hostName
}

static def buildTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def revision() {
    def code = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = code
    }
    return code.toString()
}