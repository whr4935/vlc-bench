apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    signingConfigs {
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "org.videolan.vlcbenchmark"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 14
        versionName "0.1.14"
        buildConfigField("String", "VLC_VERSION", "\"3.2.0\"")
        vectorDrawables.useSupportLibrary = true
        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()
        signingConfig signingConfigs.debug
    }
    // right now debug_prod & release mode use the same URL ressources
    // but in the future there will be a debug infra
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "build_api_address", "https://bench.videolabs.io/api/"
            resValue "string", "file_location_url", "https://streams.videolan.org/benchmark/"
            resValue "string", "config_file_location_url", "https://streams.videolan.org/benchmark/config.json"
            resValue "string", "vlc_package_name", "org.videolan.vlc"
            resValue "string", "server_client_id", "226055421863-b236djcm1n80tvs6oungnv3cog5pp9jp.apps.googleusercontent.com"
        }
        // debug is to use with local resources
        debug {
            applicationIdSuffix ".debug"
            resValue "string", "build_api_address", "http://" + apiAddress() + ":8080/"
            resValue "string", "file_location_url", fileLocationProtocol() + fileLocationUrl() + "/"
            resValue "string", "config_file_location_url", configFileProtocol() + configFileUrl() + "/config.json"
            resValue "string", "vlc_package_name", "org.videolan.vlc.debug"
            resValue "string", "server_client_id", "226055421863-pd9nfn0rj38bm389a6kv8v039c821bsf.apps.googleusercontent.com"
            debuggable true
        }
        // debug_prod is debug mode with the urls resources of release
        debug_prod {
            initWith debug
            resValue "string", "build_api_address", "https://bench.videolabs.io/api/"
            resValue "string", "file_location_url", "https://streams.videolan.org/benchmark/"
            resValue "string", "config_file_location_url", "https://streams.videolan.org/benchmark/config.json"
        }
    }

    sourceSets.debug {
        res.srcDirs = ['src/debug/res']
    }
    sourceSets.debug_prod {
        res.srcDirs = ['src/debug/res']
    }

    applicationVariants.all { variant ->
        //Custom APK name
        variant.outputs.all { output ->
            outputFileName = "VLCBenchmark-" + variant.versionName + "_" + variant.baseName + ".apk"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    def lifecycle_version = "2.0.0"

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.google.android.material:material:1.1.0-alpha06'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.preference:preference:1.1.0-alpha05'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    implementation 'com.google.android.gms:play-services-auth:16.0.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta1'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    testImplementation 'junit:junit:4.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.squareup.retrofit2:retrofit:2.6.1'
}
repositories {
    mavenCentral()
}

def configFileProtocol() {
    if (vlc_bench_config_file_protocol != "") {
        return vlc_bench_config_file_protocol
    }
    return "ftp://"
}

def fileLocationProtocol() {
    if (vlc_bench_config_file_protocol != "") {
        return vlc_bench_file_location_protocol
    }
    return "ftp://"
}

def fileLocationUrl() {
    if (vlc_bench_file_location_url != "") {
        return vlc_bench_file_location_url
    }
    return apiAddress()
}

def configFileUrl() {
    if (vlc_bench_config_file_url != "") {
        return vlc_bench_config_file_url
    }
    return apiAddress()
}

def apiAddress() {
    String result = ""
    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces()
    while (interfaces.hasMoreElements()) {
        NetworkInterface anInterface = interfaces.nextElement()
        if (anInterface.displayName.contains("docker") ||
                anInterface.displayName.contains("virbr") ||
                anInterface.displayName.contains("br-") ||
                anInterface.displayName == "lo") {
            continue
        }
        Enumeration<InetAddress> addresses = anInterface.getInetAddresses()
        while (addresses.hasMoreElements()) {
            InetAddress address = addresses.nextElement();
            if (!address.isLoopbackAddress()) {
                result = address.getHostAddress()
                if (address instanceof Inet6Address) {
                    result = result.replace("%" + anInterface.name, "")
                }
            }
        }
    }
    return result

}

static def hostName() {
    return "${System.getProperty("user.name")}@${InetAddress.localHost.hostName}"
}

static def buildTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def revision() {
    def code = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = code
    }
    return code.toString()
}
